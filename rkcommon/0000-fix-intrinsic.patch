diff -u -r rkcommon-1.8.0-orig/rkcommon/math/rkmath.h rkcommon-1.8.0/rkcommon/math/rkmath.h
--- rkcommon-1.8.0-orig/rkcommon/math/rkmath.h	2022-01-21 15:04:23.354853133 +0800
+++ rkcommon-1.8.0/rkcommon/math/rkmath.h	2022-01-21 15:08:28.738455154 +0800
@@ -28,7 +28,7 @@
 }  // namespace std
 #endif
 #else
-#if !defined(__ARM_NEON)
+#if !defined(__ARM_NEON) && !defined(__riscv)
 #include <emmintrin.h>
 #include <xmmintrin.h>
 #endif
@@ -57,10 +57,14 @@
 
     __forceinline float rcp(const float x)
     {
+#if defined(__riscv)
+      return 1.0 / x;
+#else
       const __m128 a = _mm_set_ss(x);
       const __m128 r = _mm_rcp_ss(a);
       return _mm_cvtss_f32(
           _mm_mul_ss(r, _mm_sub_ss(_mm_set_ss(2.0f), _mm_mul_ss(r, a))));
+#endif
     }
 
     __forceinline float rcp_safe(float f)
@@ -70,6 +74,9 @@
 
     __forceinline float rsqrt(const float x)
     {
+#if defined(__riscv)
+      return 1.0 / std::sqrt(x);
+#else
       const __m128 a = _mm_set_ss(x);
       const __m128 r = _mm_rsqrt_ss(a);
       const __m128 c =
@@ -77,6 +84,7 @@
                      _mm_mul_ss(_mm_mul_ss(_mm_mul_ss(a, _mm_set_ss(-0.5f)), r),
                                 _mm_mul_ss(r, r)));
       return _mm_cvtss_f32(c);
+#endif
     }
 
     template <typename T>
diff -u -r rkcommon-1.8.0-orig/rkcommon/tasking/detail/tasking_system_init.cpp rkcommon-1.8.0/rkcommon/tasking/detail/tasking_system_init.cpp
--- rkcommon-1.8.0-orig/rkcommon/tasking/detail/tasking_system_init.cpp	2022-01-21 15:04:23.354853133 +0800
+++ rkcommon-1.8.0/rkcommon/tasking/detail/tasking_system_init.cpp	2022-01-21 15:49:53.198053188 +0800
@@ -17,21 +17,35 @@
 // std
 #include <thread>
 // intrinsics
+#if !defined(__riscv)
 #if !defined(__ARM_NEON)
 #include <xmmintrin.h>
 #elif !defined(_WIN32)
 #include "math/arm/emulation.h"
 #endif
+#endif
 // rkcommon
 #include "../../common.h"
 
 /* normally defined in pmmintrin.h, but we always need this */
 #if !defined(_MM_SET_DENORMALS_ZERO_MODE)
+
+#if defined(__riscv)
+
+// RISC-V fcsr register does not support FZ mode, ignore
+#define _MM_SET_FLUSH_ZERO_MODE(x) do {} while(0)
+#define _MM_SET_DENORMALS_ZERO_MODE(x) do {} while(0)
+
+#else
+
 #define _MM_DENORMALS_ZERO_ON (0x0040)
 #define _MM_DENORMALS_ZERO_OFF (0x0000)
 #define _MM_DENORMALS_ZERO_MASK (0x0040)
 #define _MM_SET_DENORMALS_ZERO_MODE(x) \
   (_mm_setcsr((_mm_getcsr() & ~_MM_DENORMALS_ZERO_MASK) | (x)))
+
+#endif
+
 #endif
 
 namespace rkcommon {
