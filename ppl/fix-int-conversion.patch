diff -r -u ppl-1.2-orig/interfaces/Prolog/Ciao/ciao_cfli.hh ppl-1.2/interfaces/Prolog/Ciao/ciao_cfli.hh
--- ppl-1.2-orig/interfaces/Prolog/Ciao/ciao_cfli.hh	2022-02-18 10:06:28.349139633 +0100
+++ ppl-1.2/interfaces/Prolog/Ciao/ciao_cfli.hh	2022-02-18 10:12:24.033601227 +0100
@@ -296,7 +296,7 @@
   The behavior is undefined if \p t is not a Prolog compound term.
 */
 inline int
-Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, int* ip) {
+Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, size_t* ip) {
   assert(Prolog_is_compound(t));
   *ap = ciao_structure_name(t);
   *ip = ciao_structure_arity(t);
diff -r -u ppl-1.2-orig/interfaces/Prolog/GNU/gprolog_cfli.hh ppl-1.2/interfaces/Prolog/GNU/gprolog_cfli.hh
--- ppl-1.2-orig/interfaces/Prolog/GNU/gprolog_cfli.hh	2022-02-18 10:06:28.349139633 +0100
+++ ppl-1.2/interfaces/Prolog/GNU/gprolog_cfli.hh	2022-02-18 10:15:06.240773638 +0100
@@ -333,7 +333,7 @@
   if (Blt_Compound(t) == FALSE)
     return 0;
   Prolog_atom name;
-  int arity;
+  size_t arity;
   Rd_Compound(t, &name, &arity);
   return name == ATOM_CHAR('.') && arity == 2;
 }
@@ -359,7 +359,7 @@
   if (!Prolog_is_compound(t))
     return 0;
   Prolog_atom name;
-  int arity;
+  size_t arity;
   Prolog_term_ref* a = Rd_Compound_Check(t, &name, &arity);
   if (name != a_dollar_address()
       || sizeof(unsigned short)*arity != sizeof(void*))
@@ -420,7 +420,7 @@
   The behavior is undefined if \p t is not a Prolog compound term.
 */
 inline int
-Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, int* ip) {
+Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, size_t* ip) {
   assert(Prolog_is_compound(t));
   Rd_Compound_Check(t, ap, ip);
   return 1;
diff -r -u ppl-1.2-orig/interfaces/Prolog/ppl_interface_generator_prolog_cc_code.m4 ppl-1.2/interfaces/Prolog/ppl_interface_generator_prolog_cc_code.m4
--- ppl-1.2-orig/interfaces/Prolog/ppl_interface_generator_prolog_cc_code.m4	2022-02-18 10:06:28.352472977 +0100
+++ ppl-1.2/interfaces/Prolog/ppl_interface_generator_prolog_cc_code.m4	2022-02-18 10:14:21.587301476 +0100
@@ -1934,7 +1934,7 @@
     while (Prolog_is_cons(t_pfunc)) {
       Prolog_get_cons(t_pfunc, t_pair, t_pfunc);
       Prolog_atom functor;
-      int arity;
+      size_t arity;
       Prolog_get_compound_name_arity(t_pair, &functor, &arity);
       if (arity != 2 || functor != a_minus)
         return PROLOG_FAILURE;
diff -r -u ppl-1.2-orig/interfaces/Prolog/ppl_prolog_common.cc ppl-1.2/interfaces/Prolog/ppl_prolog_common.cc
--- ppl-1.2-orig/interfaces/Prolog/ppl_prolog_common.cc	2022-02-18 10:06:28.352472977 +0100
+++ ppl-1.2/interfaces/Prolog/ppl_prolog_common.cc	2022-02-18 10:58:33.753529753 +0100
@@ -937,7 +937,7 @@
     return Linear_Expression(integer_term_to_Coefficient(t));
   else if (Prolog_is_compound(t)) {
     Prolog_atom functor;
-    int arity;
+    size_t arity;
     Prolog_get_compound_name_arity(t, &functor, &arity);
     switch (arity) {
     case 1:
@@ -1000,7 +1000,7 @@
 build_constraint(Prolog_term_ref t, const char* where) {
   if (Prolog_is_compound(t)) {
     Prolog_atom functor;
-    int arity;
+    size_t arity;
     Prolog_get_compound_name_arity(t, &functor, &arity);
     if (arity == 2) {
       Prolog_term_ref arg1 = Prolog_new_term_ref();
@@ -1073,7 +1073,7 @@
 build_congruence(Prolog_term_ref t, const char* where) {
   if (Prolog_is_compound(t)) {
     Prolog_atom functor;
-    int arity;
+    size_t arity;
     Prolog_get_compound_name_arity(t, &functor, &arity);
     if (arity == 2) {
       Prolog_term_ref arg1 = Prolog_new_term_ref();
@@ -1084,7 +1084,7 @@
         // /
         if (Prolog_is_integer(arg2)) {
           Prolog_atom functor1;
-          int arity1;
+          size_t arity1;
           Prolog_get_compound_name_arity(arg1, &functor1, &arity1);
           if (arity1 == 2) {
             if (functor1 == a_is_congruent_to) {
@@ -1137,7 +1137,7 @@
 build_generator(Prolog_term_ref t, const char* where) {
   if (Prolog_is_compound(t)) {
     Prolog_atom functor;
-    int arity;
+    size_t arity;
     Prolog_get_compound_name_arity(t, &functor, &arity);
     if (arity == 1) {
       Prolog_term_ref arg = Prolog_new_term_ref();
@@ -1174,7 +1174,7 @@
 build_grid_generator(Prolog_term_ref t, const char* where) {
   if (Prolog_is_compound(t)) {
     Prolog_atom functor;
-    int arity;
+    size_t arity;
     Prolog_get_compound_name_arity(t, &functor, &arity);
     if (arity == 1) {
       Prolog_term_ref arg = Prolog_new_term_ref();
@@ -1406,7 +1406,7 @@
 term_to_Variable(Prolog_term_ref t, const char* where) {
   if (Prolog_is_compound(t)) {
     Prolog_atom functor;
-    int arity;
+    size_t arity;
     Prolog_get_compound_name_arity(t, &functor, &arity);
     if (functor == a_dollar_VAR && arity == 1) {
       Prolog_term_ref arg = Prolog_new_term_ref();
@@ -1554,7 +1554,7 @@
     return false;
 
   Prolog_atom functor;
-  int arity;
+  size_t arity;
 
   Prolog_get_compound_name_arity(t_b, &functor, &arity);
   // A boundary term is either of the form c(Limit) or o(Limit).
diff -r -u ppl-1.2-orig/interfaces/Prolog/SICStus/sicstus_cfli.h ppl-1.2/interfaces/Prolog/SICStus/sicstus_cfli.h
--- ppl-1.2-orig/interfaces/Prolog/SICStus/sicstus_cfli.h	2022-02-18 10:06:28.352472977 +0100
+++ ppl-1.2/interfaces/Prolog/SICStus/sicstus_cfli.h	2022-02-18 10:12:02.710201086 +0100
@@ -134,7 +134,7 @@
 
 PCFLI_DECLSPEC int
 Prolog_get_compound_name_arity(Prolog_term_ref t,
-                               Prolog_atom& name, int& arity);
+                               Prolog_atom& name, size_t& arity);
 
 PCFLI_DECLSPEC int
 Prolog_get_arg(int i, Prolog_term_ref t, Prolog_term_ref a);
diff -r -u ppl-1.2-orig/interfaces/Prolog/SICStus/sicstus_cfli.ic ppl-1.2/interfaces/Prolog/SICStus/sicstus_cfli.ic
--- ppl-1.2-orig/interfaces/Prolog/SICStus/sicstus_cfli.ic	2022-02-18 10:06:28.352472977 +0100
+++ ppl-1.2/interfaces/Prolog/SICStus/sicstus_cfli.ic	2022-02-18 10:11:51.173498239 +0100
@@ -262,7 +262,7 @@
   The behavior is undefined if \p t is not a Prolog compound term.
 */
 PCFLI_EXTERN_INLINE int
-Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, int* ip) {
+Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, size_t* ip) {
   assert(Prolog_is_compound(t));
   return SP_get_functor(t, ap, ip);
 }
diff -r -u ppl-1.2-orig/interfaces/Prolog/SWI/swi_cfli.hh ppl-1.2/interfaces/Prolog/SWI/swi_cfli.hh
--- ppl-1.2-orig/interfaces/Prolog/SWI/swi_cfli.hh	2022-02-18 10:06:28.349139633 +0100
+++ ppl-1.2/interfaces/Prolog/SWI/swi_cfli.hh	2022-02-18 10:12:14.180237032 +0100
@@ -346,7 +346,7 @@
   The behavior is undefined if \p t is not a Prolog compound term.
 */
 inline int
-Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, int* ip) {
+Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, size_t* ip) {
   assert(Prolog_is_compound(t));
   return PL_get_name_arity(t, ap, ip);
 }
diff -r -u ppl-1.2-orig/interfaces/Prolog/XSB/xsb_cfli.hh ppl-1.2/interfaces/Prolog/XSB/xsb_cfli.hh
--- ppl-1.2-orig/interfaces/Prolog/XSB/xsb_cfli.hh	2022-02-18 10:06:28.352472977 +0100
+++ ppl-1.2/interfaces/Prolog/XSB/xsb_cfli.hh	2022-02-18 10:11:25.240083481 +0100
@@ -314,7 +314,7 @@
   The behavior is undefined if \p t is not a Prolog compound term.
 */
 inline int
-Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, int* ip) {
+Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, size_t* ip) {
   assert(Prolog_is_compound(t));
   *ap = p2c_functor(t);
   *ip = p2c_arity(t);
diff -r -u ppl-1.2-orig/interfaces/Prolog/YAP/yap_cfli.hh ppl-1.2/interfaces/Prolog/YAP/yap_cfli.hh
--- ppl-1.2-orig/interfaces/Prolog/YAP/yap_cfli.hh	2022-02-18 10:06:28.352472977 +0100
+++ ppl-1.2/interfaces/Prolog/YAP/yap_cfli.hh	2022-02-18 10:11:38.910126418 +0100
@@ -313,7 +313,7 @@
   The behavior is undefined if \p t is not a Prolog compound term.
 */
 inline int
-Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, int* ip) {
+Prolog_get_compound_name_arity(Prolog_term_ref t, Prolog_atom* ap, size_t* ip) {
   assert(Prolog_is_compound(t));
   YAP_Functor f = YAP_FunctorOfTerm(t);
   *ap = YAP_NameOfFunctor(f);
